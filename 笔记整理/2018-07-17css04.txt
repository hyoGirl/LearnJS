

1：文档流

元素从上到下，从左到右

块元素独占一行，行内元素在一行显示，遇到父级元素边框换行


2：浮动

	float left  right

	浮动元素就脱离了文档流，不再占据原来的位置了。
	浮动的元素就独占一行 

	效果：

	前一个块元素一旦浮动，那么后面一个块元素就会占据上一个块元素的位置

	从而，在同样大小的情况下，后面的元素被浮在上面的元素遮盖着。

	行内元素一旦浮动，就会变成行内块，但是脱离了标准流，不推荐

	还是使用display来。

	应用：
	1：制作文本绕图
	2：制作简单导航
	3: 制作浮动布局

	简单导航采用 ul li a 是因为数据来源于后台添加，使用列表形式可以方便添加

	要排在最边上，需要设置取消 ul li的padding和margin


	body 里面默认margin是8px


li是在一行显示的，ul和li都是块元素，ul 

行高最好设置在a里面。

盒子大小不包含外边距，但是鼠标经过的时候是显示整个盒子的宽度。
就算设置了宽度，a也不会变大

块元素的高度不能继承，li设置一个高度


重点：


	父级盒子不给高度，内部子盒子浮动


	最下面的盒子就会占据父级盒子的位置


	出现了浮动的坏处


	父级盒子不给高度，是因为div里面内容不确定，不知道有多高



这里要解决清除浮动的坏处。

伪元素，还有overflow：hidden

但是overflow：hidden 是对超出盒子的部分进行隐藏，如果内容出了盒子。比如在盒子上面。就不好了

会删掉内容

3定位：position

	1：静态定位  static  默认就是文档流

	2：绝对定位  absolute  相对于浏览器


	有嵌套关系的盒子，两者都是绝对定位。那么子盒子就变成相对于父盒子移动了


	元素只要使用了绝对定位后就脱离了文档流，


	3：相对定位  relative  相对于自身  没有脱离文档流。所以下面的盒子不会上去


	子绝父相

	父元素相对定位，子元素绝对定位。子元素相对于父元素来移动。子元素是离它最近的

	行内元素使用相对定位是不能转换为行内块的。

	4：固定定位  fix

	固定定位 会导致元素脱离文档流

	但是固定定位是相对浏览器的。和绝对定位类似

	固定定位可以转行内块

	 定位的盒子居中显示

	 先相对于父盒子走50%，然后往右走自己的一半

4：盒子居中显示：


margin: 0 auto;
只能让标准流的盒子居中对齐，脱标的盒子就没用了。就是说采用了绝对定位，固定定位


5：z-index 显示层叠顺序


6：标签的规范

	1：div可以包含所有的标签
	2：p标签里面不能包含div和 h1 标签
	3：p标签更多包含的是行内元素，不推荐使用块元素
	4：H1可以包含p div等标签
	5：行内元素尽量不包含行内元素

7：CSS可见性

	overflow:hidden  溢出隐藏  

	visibility:hidden 隐藏元素  隐藏后，还是占据原来的位置

	display:none 隐藏元素  隐藏后不占据原来的位置

	display：block  元素可见，这个不是块元素了   


8:tab栏切换

使用锚点来设置














